package courseplayw;

import com.microsoft.playwright.APIRequest;
import com.microsoft.playwright.APIRequestContext;
import com.microsoft.playwright.APIResponse;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.*;

import java.io.ByteArrayOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

import static org.junit.jupiter.api.Assertions.*;

public class FileUploadTest {
    Playwright playwright;
    APIRequestContext request;
    private byte[] testPngData;

    @BeforeEach
    void setUp() {
        playwright = Playwright.create();
        request = playwright.request().newContext();
        testPngData = generateTestPng();
    }

    @Test
    void testFileDownload() {
        try {
            // 1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ PNG —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Playwright
            APIResponse downloadResponse = downloadReferencePng();

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞
            verifyPngFile(downloadResponse);

            System.out.println("‚úÖ –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            fail("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: " + e.getMessage());
        }
    }

    @Test
    void testFileUploadWithJavaHttp() {
        try {
            System.out.println("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Java HTTP...");

            String responseBody = uploadWithJavaHttp();

            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º JSON –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 200 —Å—Ç–∞—Ç—É—Å
            assertTrue(responseBody.contains("\"url\""), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º JSON");
            assertTrue(responseBody.contains("https://httpbin.org/post"), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å URL –∑–∞–ø—Ä–æ—Å–∞");

            System.out.println("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ Java HTTP");

        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Java HTTP: " + e.getMessage());
        }
    }

    private String uploadWithJavaHttp() throws Exception {
        String boundary = "----WebKitFormBoundary7MA4YWxkTrZu0gW";
        String crlf = "\r\n";

        // –°—Ç—Ä–æ–∏–º multipart —Ç–µ–ª–æ
        StringBuilder bodyBuilder = new StringBuilder();
        bodyBuilder.append("--").append(boundary).append(crlf);
        bodyBuilder.append("Content-Disposition: form-data; name=\"file\"; filename=\"test-image.png\"").append(crlf);
        bodyBuilder.append("Content-Type: image/png").append(crlf);
        bodyBuilder.append(crlf);

        String bodyStart = bodyBuilder.toString();
        String bodyEnd = crlf + "--" + boundary + "--" + crlf;

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        byte[] bodyStartBytes = bodyStart.getBytes();
        byte[] bodyEndBytes = bodyEnd.getBytes();

        byte[] fullBody = new byte[bodyStartBytes.length + testPngData.length + bodyEndBytes.length];
        System.arraycopy(bodyStartBytes, 0, fullBody, 0, bodyStartBytes.length);
        System.arraycopy(testPngData, 0, fullBody, bodyStartBytes.length, testPngData.length);
        System.arraycopy(bodyEndBytes, 0, fullBody, bodyStartBytes.length + testPngData.length, bodyEndBytes.length);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Java HTTP
        URL url = new URL("https://httpbin.org/post");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
        connection.setRequestProperty("Content-Length", String.valueOf(fullBody.length));
        connection.setDoOutput(true);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        connection.getOutputStream().write(fullBody);

        // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        int responseCode = connection.getResponseCode();
        assertEquals(200, responseCode, "HTTP —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200");

        // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        ByteArrayOutputStream result = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int length;
        while ((length = connection.getInputStream().read(buffer)) != -1) {
            result.write(buffer, 0, length);
        }

        String responseBody = result.toString(StandardCharsets.UTF_8.name());
        System.out.println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + responseBody); // –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        return responseBody;
    }

    private APIResponse downloadReferencePng() {
        System.out.println("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ PNG —Ñ–∞–π–ª–∞...");

        // –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Playwright
        APIResponse response = request.get("https://httpbin.org/image/png");

        assertEquals(200, response.status(), "–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ");
        System.out.println("‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω, —Å—Ç–∞—Ç—É—Å: " + response.status());

        return response;
    }

    private void verifyPngFile(APIResponse downloadResponse) {
        System.out.println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ PNG —Ñ–∞–π–ª–∞...");

        byte[] content = downloadResponse.body();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞
        String contentType = downloadResponse.headers().get("content-type");
        assertEquals("image/png", contentType,
                "Content-Type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å image/png");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã PNG (–º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞)
        // PNG —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: 89 50 4E 47 0D 0A 1A 0A
        assertEquals(0x89, content[0] & 0xFF, "–ü–µ—Ä–≤—ã–π –±–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0x89");
        assertEquals(0x50, content[1] & 0xFF, "–í—Ç–æ—Ä–æ–π –±–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'P' (0x50)");
        assertEquals(0x4E, content[2] & 0xFF, "–¢—Ä–µ—Ç–∏–π –±–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'N' (0x4E)");
        assertEquals(0x47, content[3] & 0xFF, "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –±–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'G' (0x47)");
        assertEquals(0x0D, content[4] & 0xFF, "–ü—è—Ç—ã–π –±–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0x0D");
        assertEquals(0x0A, content[5] & 0xFF, "–®–µ—Å—Ç–æ–π –±–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0x0A");
        assertEquals(0x1A, content[6] & 0xFF, "–°–µ–¥—å–º–æ–π –±–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0x1A");
        assertEquals(0x0A, content[7] & 0xFF, "–í–æ—Å—å–º–æ–π –±–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0x0A");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        assertTrue(content.length > 100, "PNG —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 100 –±–∞–π—Ç");

        System.out.println("‚úÖ PNG —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: " + content.length + " –±–∞–π—Ç");
        System.out.println("‚úÖ MIME-—Ç–∏–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: " + contentType);
    }

    @Test
    void testBase64FileVerification() {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å base64 –¥–∞–Ω–Ω—ã–º–∏
        System.out.println("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Base64 –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...");

        // –ö–æ–¥–∏—Ä—É–µ–º –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π PNG –≤ base64
        String base64Data = Base64.getEncoder().encodeToString(testPngData);

        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        byte[] decodedData = Base64.getDecoder().decode(base64Data);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
        assertArrayEquals(testPngData, decodedData,
                "–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å");

        System.out.println("‚úÖ Base64 –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–∞–ª–∏–¥–Ω—ã–π PNG —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
     */
    private byte[] generateTestPng() {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π PNG —Ñ–∞–π–ª (1x1 —á–µ—Ä–Ω—ã–π –ø–∏–∫—Å–µ–ª—å)
        byte[] minimalPng = new byte[] {
                (byte) 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
                0x00, 0x00, 0x00, 0x0D,                                 // IHDR chunk length
                0x49, 0x48, 0x44, 0x52,                                 // IHDR
                0x00, 0x00, 0x00, 0x01,                                 // Width: 1
                0x00, 0x00, 0x00, 0x01,                                 // Height: 1
                0x08, 0x02, 0x00, 0x00, 0x00,                           // Bit depth, color type, etc.
                (byte) 0x90, 0x77, (byte) 0x53, (byte) 0xDE,            // CRC
                0x00, 0x00, 0x00, 0x0A,                                 // IDAT chunk length
                0x49, 0x44, 0x41, 0x54,                                 // IDAT
                0x08, 0x5D, 0x01, 0x01, 0x00, 0x00, 0x00, (byte) 0xFF,  // Image data
                (byte) 0xFF, 0x00, 0x00, 0x00, 0x00,                    // Image data continued
                (byte) 0xAE, 0x42, 0x60, (byte) 0x82,                   // CRC
                0x00, 0x00, 0x00, 0x00,                                 // IEND chunk length
                0x49, 0x45, 0x4E, 0x44,                                 // IEND
                (byte) 0xAE, 0x42, 0x60, (byte) 0x82                    // CRC
        };

        System.out.println("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π PNG —Ñ–∞–π–ª, —Ä–∞–∑–º–µ—Ä: " + minimalPng.length + " –±–∞–π—Ç");
        return minimalPng;
    }

    @AfterEach
    void tearDown() {
        try {
            if (request != null) {
                request.dispose();
            }
            if (playwright != null) {
                playwright.close();
            }
            System.out.println("üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã");
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: " + e.getMessage());
        }
    }
}