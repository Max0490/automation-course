package courseplayw;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.microsoft.playwright.APIRequest;
import com.microsoft.playwright.APIRequestContext;
import com.microsoft.playwright.APIResponse;
import com.microsoft.playwright.Playwright;
import org.junit.jupiter.api.*;

import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

public class TodoApiTest {
    Playwright playwright;
    APIRequestContext requestContext;
    ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    void setUp() {
        playwright = Playwright.create();
        requestContext = playwright.request().newContext(
                new APIRequest.NewContextOptions()
                        .setBaseURL("https://jsonplaceholder.typicode.com")
        );
    }

    @Test
    void testTodosApi() throws Exception {

        APIResponse response = requestContext.get("/todos");


        assertEquals(200, response.status());
        System.out.println("‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–¥: " + response.status());


        String responseBody = response.text();
        List<Map<String, Object>> todos = objectMapper.readValue(
                responseBody,
                objectMapper.getTypeFactory().constructCollectionType(List.class, Map.class)
        );


        assertFalse(todos.isEmpty(), "–°–ø–∏—Å–æ–∫ todos –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");


        Map<String, Object> firstTodo = todos.get(0);


        assertTrue(firstTodo.containsKey("userId"), "–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ userId");
        assertTrue(firstTodo.containsKey("id"), "–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ id");
        assertTrue(firstTodo.containsKey("title"), "–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ title");
        assertTrue(firstTodo.containsKey("completed"), "–î–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ completed");


        assertInstanceOf(Integer.class, firstTodo.get("userId"), "userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
        assertInstanceOf(Integer.class, firstTodo.get("id"), "id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
        assertInstanceOf(String.class, firstTodo.get("title"), "title –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π");
        assertInstanceOf(Boolean.class, firstTodo.get("completed"), "completed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean");

        System.out.println("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –≤–∞–ª–∏–¥–Ω–∞");
        System.out.println("üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " + todos.size());
        System.out.println("üìù –ü–µ—Ä–≤—ã–π todo: " + firstTodo.get("title"));
    }

    @Test
    void testSingleTodo() throws Exception {

        APIResponse response = requestContext.get("/todos/1");


        assertEquals(200, response.status());


        String responseBody = response.text();
        Map<String, Object> todo = objectMapper.readValue(responseBody, Map.class);


        assertEquals(1, todo.get("id"), "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1");
        assertEquals(1, todo.get("userId"), "User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1");
        assertNotNull(todo.get("title"), "Title –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");
        assertNotNull(todo.get("completed"), "Completed –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null");

        System.out.println("‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–π todo –ø—Ä–æ–≤–µ—Ä–µ–Ω: " + todo.get("title"));
    }

    @Test
    void testPostsApi() throws Exception {

        APIResponse response = requestContext.get("/posts");


        assertEquals(200, response.status());


        String responseBody = response.text();
        List<Map<String, Object>> posts = objectMapper.readValue(
                responseBody,
                objectMapper.getTypeFactory().constructCollectionType(List.class, Map.class)
        );


        assertFalse(posts.isEmpty());

        Map<String, Object> firstPost = posts.get(0);
        assertTrue(firstPost.containsKey("userId"));
        assertTrue(firstPost.containsKey("id"));
        assertTrue(firstPost.containsKey("title"));
        assertTrue(firstPost.containsKey("body"));

        System.out.println("‚úÖ Posts API –ø—Ä–æ–≤–µ—Ä–µ–Ω, –≤—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: " + posts.size());
    }

    @Test
    void testUsersApi() throws Exception {

        APIResponse response = requestContext.get("/users");

        assertEquals(200, response.status());

        String responseBody = response.text();
        List<Map<String, Object>> users = objectMapper.readValue(
                responseBody,
                objectMapper.getTypeFactory().constructCollectionType(List.class, Map.class)
        );


        Map<String, Object> firstUser = users.get(0);


        assertTrue(firstUser.containsKey("id"));
        assertTrue(firstUser.containsKey("name"));
        assertTrue(firstUser.containsKey("username"));
        assertTrue(firstUser.containsKey("email"));


        assertTrue(firstUser.containsKey("address"));
        assertTrue(firstUser.containsKey("company"));

        Map<String, Object> address = (Map<String, Object>) firstUser.get("address");
        assertTrue(address.containsKey("street"));
        assertTrue(address.containsKey("city"));

        System.out.println("‚úÖ Users API –ø—Ä–æ–≤–µ—Ä–µ–Ω, –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + firstUser.get("name"));
    }

    @Test
    void testErrorHandling() {

        APIResponse response = requestContext.get("/nonexistent");

        assertEquals(404, response.status());
        System.out.println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }

    @Test
    void testResponseHeaders() {

        APIResponse response = requestContext.get("/todos/1");

        assertEquals(200, response.status());
        assertTrue(response.headers().containsKey("content-type"));
        assertTrue(response.headers().get("content-type").contains("application/json"));

        System.out.println("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: " + response.headers().get("content-type"));
    }

    @AfterEach
    void tearDown() {
        if (requestContext != null) {
            requestContext.dispose();
        }
        if (playwright != null) {
            playwright.close();
        }
    }
}